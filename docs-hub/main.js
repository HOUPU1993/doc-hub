// Documentation Hub JavaScript

// Initialize Lucide icons
lucide.createIcons();

// Set current year in the footer
document.getElementById('current-year').textContent = new Date().getFullYear();

// Mobile menu toggle
const mobileMenuButton = document.getElementById('mobile-menu-button');
const mobileMenu = document.getElementById('mobile-menu');

mobileMenuButton.addEventListener('click', () => {
  mobileMenu.classList.toggle('hidden');
});

// Close mobile menu when clicking on a link
document.querySelectorAll('#mobile-menu a').forEach(link => {
  link.addEventListener('click', () => {
    mobileMenu.classList.add('hidden');
  });
});

// Sample data (mimicking the API response)
const processStepsData = [
  {
    id: 1,
    order: 1,
    title: "01. Preparation",
    description: "Dataset creation methodology and initial data processing techniques.",
    icon: "clipboard-list",
    iconBgColor: "icon-bg-blue",
    iconColor: "text-blue-500",
    links: [
      { label: "Classify Parcel Edge Docs", url: "https://houpu-pect-project.netlify.app/" },
      { label: "OZFS Zoning Standardize Docs", url: "https://kamrynmansfield.github.io/ozfs/qmd/ozfs.html" },
      { label: "Create Building Samples Docs", url: "https://kamrynmansfield.github.io/ozfs/qmd/ozfs.html" },
    ]
  },
  {
    id: 2,
    order: 2,
    title: "02. Package",
    description: "Documentation for Python & R Studio packages developed for this project.",
    icon: "package",
    iconBgColor: "icon-bg-violet",
    iconColor: "text-purple-500",
    links: [
      { label: "Python & R Package Docs", url: "https://tidyzoning-documentation.netlify.app/" }
    ]
  },
  {
    id: 3,
    order: 3,
    title: "03. Analysis",
    description: "Tutorials on using datasets and packages for urban accessibility research.",
    icon: "bar-chart",
    iconBgColor: "icon-bg-green",
    iconColor: "text-green-500",
    links: [
      { label: "View Analysis", url: "https://tncparking.sfcta.org/" }
    ]
  },
  {
    id: 4,
    order: 4,
    title: "04. Report",
    description: "Comprehensive research findings with methodologies and policy implications.",
    icon: "file-text",
    iconBgColor: "icon-bg-amber",
    iconColor: "text-amber-600",
    links: [
      { label: "View Report", url: "https://www.gsd.harvard.edu/course/travel-behavior-and-forecasting-spring-2025/" }
    ]
  },
  {
    id: 5,
    order: 5,
    title: "05. Publication",
    description: "Academic papers or conferences sharing research outcomes.",
    icon: "book-open",
    iconBgColor: "icon-bg-red",
    iconColor: "text-red-600",
    links: [
      { label: "View Publication", url: "https://www.sciencedirect.com/science/article/pii/S1077291X22000893" }
    ]
  }
];

const datasetsData = [
  {
    id: 1,
    title: "Standardized Zoning Dataset",
    format: "GeoJSON",
    formatColor: "blue",
    description: "Harmonized zoning designations across multiple municipalities with standardized attributes.",
    size: "750 MB",
    lastUpdated: "2023-05-15",
    downloadUrl: "#",
    previewUrl: "#",
    detailsUrl: "#",
    category: "Geospatial"
  },
  {
    id: 2,
    title: "Building Samples Dataset",
    format: "CSV",
    formatColor: "purple",
    description: "Generated building format with attributes including height, floor area, and type of unit, etc.",
    size: "10 MB",
    lastUpdated: "2023-06-10",
    downloadUrl: "#",
    previewUrl: "#",
    detailsUrl: "#",
    category: "Tabular"
  },
  {
    id: 3,
    title: "Parcel Classification Dataset",
    format: "GeoJSON",
    formatColor: "blue",
    description: "Labeled parcel data with edge and confidence based on the geometric relationship with road and address match.",
    size: "12.3 GB",
    lastUpdated: "2023-04-22",
    downloadUrl: "#",
    previewUrl: "#",
    detailsUrl: "#",
    category: "Geospatial"
  },
  {
    id: 4,
    title: "Parcel Dimension Dataset",
    format: "CSV",
    formatColor: "purple",
    description: "Generated by Parcel Classfication Dataset, providing additional parcel info such as lot width(ft), depth(ft) and area(acre) based on EPSG:'3801'.",
    size: "420 MB",
    lastUpdated: "2023-03-18",
    downloadUrl: "#",
    previewUrl: "#",
    detailsUrl: "#",
    category: "Tabular"
  },
  {
    id: 5,
    title: "Building Footprints Dataset",
    format: "GeoJSON",
    formatColor: "blue",
    description: "High-resolution building footprints with attributes including height, year built, and usage type, extracted from Overture Map.",
    size: "1.8 GB",
    lastUpdated: "2023-06-10",
    downloadUrl: "#",
    previewUrl: "#",
    detailsUrl: "#",
    category: "Geospatial"
  },
  {
    id: 6,
    title: "Housing Accessibility Dataset",
    format: "CSV",
    formatColor: "purple",
    description: "Calculate average accessibility to 'attractions' with and without a car under existing conditions and under each of the 20 scenarios.",
    size: "320 MB",
    lastUpdated: "2023-07-05",
    downloadUrl: "#",
    previewUrl: "#",
    detailsUrl: "#",
    category: "Tabular"
  }
];

// Load Process Steps
function loadProcessSteps() {
  const container = document.getElementById('process-steps-container');
  container.innerHTML = '';

  processStepsData.forEach(step => {
    const card = document.createElement('div');
    card.className = 'card-hover rounded-xl overflow-hidden shadow bg-white';
    card.innerHTML = `
      <div class="p-6">
        <div class="w-12 h-12 flex items-center justify-center rounded-full ${step.iconBgColor} ${step.iconColor} mb-4">
          <i data-lucide="${step.icon}" class="h-6 w-6"></i>
        </div>
        <h3 class="text-xl font-semibold text-gray-800 mb-2">
          ${step.title}
        </h3>
        <p class="text-gray-600 text-sm mb-4">
          ${step.description}
        </p>
        
        ${step.links && step.links.length > 0 ? `
          <div class="space-y-2 text-sm">
            ${step.links.map(link => `
              <a href="${link.url}" target="_blank" class="block text-blue-500 hover:text-blue-700 font-medium">
                <span class="inline-flex items-center">
                  <i data-lucide="chevron-right" class="h-4 w-4 mr-1"></i>
                  ${link.label}
                </span>
              </a>
            `).join('')}
          </div>
        ` : `
          <div class="mt-4 pt-4 border-t border-gray-100">
            <a href="#" class="inline-flex items-center text-blue-500 hover:text-blue-700 font-medium text-sm">
              View ${step.title.split(". ")[1].toLowerCase()} documentation
              <i data-lucide="chevron-right" class="h-4 w-4 ml-1"></i>
            </a>
          </div>
        `}
      </div>
    `;
    container.appendChild(card);
  });
  
  // Reinitialize icons after adding to DOM
  lucide.createIcons();
}

// Dataset handling
let currentCategory = 'all';
let currentPage = 1;
const itemsPerPage = 6;

// Filter datasets by category
function filterDatasets(category) {
  if (category === 'all') {
    return datasetsData;
  }
  return datasetsData.filter(dataset => dataset.category === category);
}

// Format date for display
function formatDate(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diffTime = Math.abs(now - date);
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays < 7) {
    return `${diffDays} days ago`;
  } else if (diffDays < 30) {
    const weeks = Math.floor(diffDays / 7);
    return `${weeks} ${weeks === 1 ? 'week' : 'weeks'} ago`;
  } else if (diffDays < 365) {
    const months = Math.floor(diffDays / 30);
    return `${months} ${months === 1 ? 'month' : 'months'} ago`;
  } else {
    const years = Math.floor(diffDays / 365);
    return `${years} ${years === 1 ? 'year' : 'years'} ago`;
  }
}

// Load and render datasets
function loadDatasets() {
  const container = document.getElementById('datasets-container');
  container.innerHTML = '';
  
  const filteredDatasets = filterDatasets(currentCategory);
  const totalPages = Math.ceil(filteredDatasets.length / itemsPerPage);
  
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, filteredDatasets.length);
  const currentDatasets = filteredDatasets.slice(startIndex, endIndex);
  
  if (currentDatasets.length === 0) {
    container.innerHTML = '<div class="col-span-3 text-center py-8 text-gray-500">No datasets found in this category.</div>';
    return;
  }
  
  currentDatasets.forEach(dataset => {
    const card = document.createElement('div');
    card.className = 'card-hover rounded-xl overflow-hidden shadow-sm bg-white';
    card.innerHTML = `
      <div class="p-6">
        <div class="flex justify-between items-start mb-4">
          <h3 class="text-lg font-semibold text-gray-800">${dataset.title}</h3>
          <span class="format-badge ${dataset.formatColor}">
            ${dataset.format}
          </span>
        </div>
        <p class="text-gray-600 text-sm mb-4">${dataset.description}</p>
        <div class="flex justify-between items-center text-sm text-gray-500">
          <span>${dataset.size}</span>
          <span>Last updated: ${formatDate(dataset.lastUpdated)}</span>
        </div>
        <div class="mt-4 pt-4 border-t border-gray-100 flex justify-between items-center">
          <div class="flex space-x-2">
            <button class="text-gray-500 hover:text-gray-700 text-sm flex items-center">
              <i data-lucide="info" class="h-4 w-4 mr-1"></i>
              Details
            </button>
            <button class="text-gray-500 hover:text-gray-700 text-sm flex items-center">
              <i data-lucide="eye" class="h-4 w-4 mr-1"></i>
              Preview
            </button>
          </div>
          <a href="${dataset.downloadUrl}" class="text-blue-500 hover:text-blue-700 font-medium text-sm flex items-center">
            Download
            <i data-lucide="download" class="h-4 w-4 ml-1"></i>
          </a>
        </div>
      </div>
    `;
    container.appendChild(card);
  });
  
  updatePagination(totalPages);
  
  // Reinitialize icons after adding to DOM
  lucide.createIcons();
}

// Update pagination controls
function updatePagination(totalPages) {
  const paginationContainer = document.getElementById('pagination-container');
  paginationContainer.innerHTML = '';
  
  if (totalPages <= 1) {
    return;
  }
  
  const pagination = document.createElement('nav');
  pagination.className = 'flex items-center';
  pagination.setAttribute('aria-label', 'Pagination');
  
  // Previous button
  const prevButton = document.createElement('button');
  prevButton.className = `pagination-button ${currentPage === 1 ? 'disabled opacity-50' : ''}`;
  prevButton.innerHTML = '<i data-lucide="chevron-left" class="h-5 w-5"></i><span class="sr-only">Previous</span>';
  prevButton.disabled = currentPage === 1;
  prevButton.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      loadDatasets();
    }
  });
  pagination.appendChild(prevButton);
  
  // Page buttons
  for (let i = 1; i <= totalPages; i++) {
    // Show ellipsis for many pages
    if (
      totalPages > 7 &&
      i !== 1 &&
      i !== totalPages &&
      (i < currentPage - 1 || i > currentPage + 1) &&
      i !== currentPage
    ) {
      if (i === 2 || i === totalPages - 1) {
        const ellipsis = document.createElement('span');
        ellipsis.className = 'inline-flex items-center px-4 py-2 mx-1 text-sm font-medium text-gray-500';
        ellipsis.textContent = '...';
        pagination.appendChild(ellipsis);
      }
      continue;
    }
    
    const pageButton = document.createElement('button');
    pageButton.className = `pagination-button ${currentPage === i ? 'active bg-blue-500 text-white' : 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50'}`;
    pageButton.textContent = i.toString();
    pageButton.addEventListener('click', () => {
      currentPage = i;
      loadDatasets();
    });
    pagination.appendChild(pageButton);
  }
  
  // Next button
  const nextButton = document.createElement('button');
  nextButton.className = `pagination-button ${currentPage === totalPages ? 'disabled opacity-50' : ''}`;
  nextButton.innerHTML = '<i data-lucide="chevron-right" class="h-5 w-5"></i><span class="sr-only">Next</span>';
  nextButton.disabled = currentPage === totalPages;
  nextButton.addEventListener('click', () => {
    if (currentPage < totalPages) {
      currentPage++;
      loadDatasets();
    }
  });
  pagination.appendChild(nextButton);
  
  paginationContainer.appendChild(pagination);
  
  // Reinitialize icons after adding to DOM
  lucide.createIcons();
}

// Set up event listeners for dataset filters
document.querySelectorAll('.dataset-filter').forEach(button => {
  button.addEventListener('click', () => {
    // Remove active class from all buttons
    document.querySelectorAll('.dataset-filter').forEach(btn => {
      btn.classList.remove('active', 'bg-blue-500', 'text-white');
      btn.classList.add('border', 'border-gray-300', 'text-gray-700', 'hover:bg-blue-500', 'hover:text-white');
    });
    
    // Add active class to clicked button
    button.classList.add('active', 'bg-blue-500', 'text-white');
    button.classList.remove('border', 'border-gray-300', 'text-gray-700', 'hover:bg-blue-500', 'hover:text-white');
    
    // Update current category and reset page
    currentCategory = button.dataset.category === 'all' ? 'all' : button.dataset.category;
    currentPage = 1;
    
    // Reload datasets
    loadDatasets();
  });
});

// Initialize page
window.addEventListener('DOMContentLoaded', () => {
  loadProcessSteps();
  loadDatasets();
});